# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,252,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,132,8,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,144,8,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,3,22,160,8,22,
        1,22,1,22,1,22,5,22,165,8,22,10,22,12,22,168,9,22,1,23,1,23,1,24,
        3,24,173,8,24,1,24,4,24,176,8,24,11,24,12,24,177,1,24,1,24,4,24,
        182,8,24,11,24,12,24,183,3,24,186,8,24,1,25,1,25,1,25,1,25,5,25,
        192,8,25,10,25,12,25,195,9,25,1,25,1,25,1,25,1,25,1,25,5,25,202,
        8,25,10,25,12,25,205,9,25,1,25,3,25,208,8,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,3,26,219,8,26,1,27,4,27,222,8,27,11,27,
        12,27,223,1,27,1,27,1,28,1,28,5,28,230,8,28,10,28,12,28,233,9,28,
        1,28,1,28,1,29,1,29,1,29,1,29,1,29,5,29,242,8,29,10,29,12,29,245,
        9,29,1,29,1,29,1,29,1,29,1,29,1,29,1,243,0,30,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,1,0,8,4,0,37,37,42,43,45,45,47,47,3,0,65,90,95,
        95,97,122,1,0,45,45,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,92,3,
        0,10,10,13,13,32,32,2,0,10,10,13,13,279,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,65,1,0,0,0,5,
        68,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,76,1,0,0,0,13,79,1,0,0,0,
        15,81,1,0,0,0,17,86,1,0,0,0,19,91,1,0,0,0,21,97,1,0,0,0,23,101,1,
        0,0,0,25,104,1,0,0,0,27,110,1,0,0,0,29,112,1,0,0,0,31,114,1,0,0,
        0,33,116,1,0,0,0,35,131,1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,
        148,1,0,0,0,43,152,1,0,0,0,45,159,1,0,0,0,47,169,1,0,0,0,49,172,
        1,0,0,0,51,207,1,0,0,0,53,218,1,0,0,0,55,221,1,0,0,0,57,227,1,0,
        0,0,59,236,1,0,0,0,61,62,5,97,0,0,62,63,5,110,0,0,63,64,5,100,0,
        0,64,2,1,0,0,0,65,66,5,111,0,0,66,67,5,114,0,0,67,4,1,0,0,0,68,69,
        5,110,0,0,69,70,5,111,0,0,70,71,5,116,0,0,71,6,1,0,0,0,72,73,5,40,
        0,0,73,8,1,0,0,0,74,75,5,41,0,0,75,10,1,0,0,0,76,77,5,105,0,0,77,
        78,5,102,0,0,78,12,1,0,0,0,79,80,5,58,0,0,80,14,1,0,0,0,81,82,5,
        101,0,0,82,83,5,108,0,0,83,84,5,105,0,0,84,85,5,102,0,0,85,16,1,
        0,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,5,115,0,0,89,90,5,101,
        0,0,90,18,1,0,0,0,91,92,5,119,0,0,92,93,5,104,0,0,93,94,5,105,0,
        0,94,95,5,108,0,0,95,96,5,101,0,0,96,20,1,0,0,0,97,98,5,102,0,0,
        98,99,5,111,0,0,99,100,5,114,0,0,100,22,1,0,0,0,101,102,5,105,0,
        0,102,103,5,110,0,0,103,24,1,0,0,0,104,105,5,114,0,0,105,106,5,97,
        0,0,106,107,5,110,0,0,107,108,5,103,0,0,108,109,5,101,0,0,109,26,
        1,0,0,0,110,111,5,44,0,0,111,28,1,0,0,0,112,113,5,91,0,0,113,30,
        1,0,0,0,114,115,5,93,0,0,115,32,1,0,0,0,116,117,7,0,0,0,117,34,1,
        0,0,0,118,132,5,61,0,0,119,120,5,43,0,0,120,132,5,61,0,0,121,122,
        5,45,0,0,122,132,5,61,0,0,123,124,5,42,0,0,124,132,5,61,0,0,125,
        126,5,47,0,0,126,132,5,61,0,0,127,128,5,37,0,0,128,132,5,61,0,0,
        129,130,5,38,0,0,130,132,5,61,0,0,131,118,1,0,0,0,131,119,1,0,0,
        0,131,121,1,0,0,0,131,123,1,0,0,0,131,125,1,0,0,0,131,127,1,0,0,
        0,131,129,1,0,0,0,132,36,1,0,0,0,133,134,5,61,0,0,134,144,5,61,0,
        0,135,136,5,33,0,0,136,144,5,61,0,0,137,144,5,60,0,0,138,139,5,60,
        0,0,139,144,5,61,0,0,140,144,5,62,0,0,141,142,5,62,0,0,142,144,5,
        61,0,0,143,133,1,0,0,0,143,135,1,0,0,0,143,137,1,0,0,0,143,138,1,
        0,0,0,143,140,1,0,0,0,143,141,1,0,0,0,144,38,1,0,0,0,145,146,5,10,
        0,0,146,147,5,9,0,0,147,40,1,0,0,0,148,149,5,10,0,0,149,150,5,9,
        0,0,150,151,5,9,0,0,151,42,1,0,0,0,152,153,5,10,0,0,153,154,5,9,
        0,0,154,155,5,9,0,0,155,156,5,9,0,0,156,44,1,0,0,0,157,160,3,47,
        23,0,158,160,5,95,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,166,1,
        0,0,0,161,165,3,47,23,0,162,165,3,49,24,0,163,165,5,95,0,0,164,161,
        1,0,0,0,164,162,1,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,
        1,0,0,0,166,167,1,0,0,0,167,46,1,0,0,0,168,166,1,0,0,0,169,170,7,
        1,0,0,170,48,1,0,0,0,171,173,7,2,0,0,172,171,1,0,0,0,172,173,1,0,
        0,0,173,175,1,0,0,0,174,176,7,3,0,0,175,174,1,0,0,0,176,177,1,0,
        0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,185,1,0,0,0,179,181,5,46,
        0,0,180,182,7,3,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,
        0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,179,1,0,0,0,185,186,1,0,
        0,0,186,50,1,0,0,0,187,193,5,34,0,0,188,189,5,92,0,0,189,192,9,0,
        0,0,190,192,8,4,0,0,191,188,1,0,0,0,191,190,1,0,0,0,192,195,1,0,
        0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,
        0,0,196,208,5,34,0,0,197,203,5,39,0,0,198,199,5,92,0,0,199,202,9,
        0,0,0,200,202,8,5,0,0,201,198,1,0,0,0,201,200,1,0,0,0,202,205,1,
        0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,
        0,0,0,206,208,5,39,0,0,207,187,1,0,0,0,207,197,1,0,0,0,208,52,1,
        0,0,0,209,210,5,84,0,0,210,211,5,114,0,0,211,212,5,117,0,0,212,219,
        5,101,0,0,213,214,5,70,0,0,214,215,5,97,0,0,215,216,5,108,0,0,216,
        217,5,115,0,0,217,219,5,101,0,0,218,209,1,0,0,0,218,213,1,0,0,0,
        219,54,1,0,0,0,220,222,7,6,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,
        221,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,6,27,0,0,226,
        56,1,0,0,0,227,231,5,35,0,0,228,230,8,7,0,0,229,228,1,0,0,0,230,
        233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,
        231,1,0,0,0,234,235,6,28,0,0,235,58,1,0,0,0,236,237,5,34,0,0,237,
        238,5,34,0,0,238,239,5,34,0,0,239,243,1,0,0,0,240,242,9,0,0,0,241,
        240,1,0,0,0,242,245,1,0,0,0,243,244,1,0,0,0,243,241,1,0,0,0,244,
        246,1,0,0,0,245,243,1,0,0,0,246,247,5,34,0,0,247,248,5,34,0,0,248,
        249,5,34,0,0,249,250,1,0,0,0,250,251,6,29,0,0,251,60,1,0,0,0,19,
        0,131,143,159,164,166,172,177,183,185,191,193,201,203,207,218,223,
        231,243,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    ARITH_OP = 17
    ASSIGN_OP = 18
    COND_OP = 19
    TAB1 = 20
    TAB2 = 21
    TAB3 = 22
    VAR = 23
    CHAR = 24
    NUM = 25
    STRING = 26
    BOOL = 27
    WS = 28
    COMMENT = 29
    MULTICOMMENT = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'('", "')'", "'if'", "':'", "'elif'", 
            "'else'", "'while'", "'for'", "'in'", "'range'", "','", "'['", 
            "']'", "'\\n\\t'", "'\\n\\t\\t'", "'\\n\\t\\t\\t'" ]

    symbolicNames = [ "<INVALID>",
            "ARITH_OP", "ASSIGN_OP", "COND_OP", "TAB1", "TAB2", "TAB3", 
            "VAR", "CHAR", "NUM", "STRING", "BOOL", "WS", "COMMENT", "MULTICOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "ARITH_OP", "ASSIGN_OP", "COND_OP", 
                  "TAB1", "TAB2", "TAB3", "VAR", "CHAR", "NUM", "STRING", 
                  "BOOL", "WS", "COMMENT", "MULTICOMMENT" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


