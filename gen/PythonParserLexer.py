# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        100,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,120,8,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,131,8,14,1,15,1,15,5,15,135,8,
        15,10,15,12,15,138,9,15,1,16,3,16,141,8,16,1,16,4,16,144,8,16,11,
        16,12,16,145,1,16,1,16,4,16,150,8,16,11,16,12,16,151,3,16,154,8,
        16,1,17,1,17,5,17,158,8,17,10,17,12,17,161,9,17,1,17,1,17,1,17,5,
        17,166,8,17,10,17,12,17,169,9,17,1,17,3,17,172,8,17,1,18,1,18,1,
        18,3,18,177,8,18,1,18,1,18,1,18,1,18,1,18,3,18,184,8,18,5,18,186,
        8,18,10,18,12,18,189,9,18,1,18,1,18,1,19,1,19,5,19,195,8,19,10,19,
        12,19,198,9,19,1,19,1,19,1,19,1,19,1,19,5,19,205,8,19,10,19,12,19,
        208,9,19,1,19,5,19,211,8,19,10,19,12,19,214,9,19,1,19,1,19,1,19,
        3,19,219,8,19,1,20,1,20,1,21,3,21,224,8,21,1,21,1,21,1,21,1,21,1,
        22,4,22,231,8,22,11,22,12,22,232,1,22,1,22,1,212,0,23,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,8,4,0,37,37,
        42,43,45,45,47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,10,10,13,13,39,39,2,0,10,
        10,13,13,2,0,9,9,32,32,265,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,
        1,0,0,0,3,50,1,0,0,0,5,52,1,0,0,0,7,57,1,0,0,0,9,62,1,0,0,0,11,66,
        1,0,0,0,13,69,1,0,0,0,15,76,1,0,0,0,17,78,1,0,0,0,19,80,1,0,0,0,
        21,86,1,0,0,0,23,88,1,0,0,0,25,99,1,0,0,0,27,119,1,0,0,0,29,130,
        1,0,0,0,31,132,1,0,0,0,33,140,1,0,0,0,35,171,1,0,0,0,37,173,1,0,
        0,0,39,218,1,0,0,0,41,220,1,0,0,0,43,223,1,0,0,0,45,230,1,0,0,0,
        47,48,5,105,0,0,48,49,5,102,0,0,49,2,1,0,0,0,50,51,5,58,0,0,51,4,
        1,0,0,0,52,53,5,101,0,0,53,54,5,108,0,0,54,55,5,105,0,0,55,56,5,
        102,0,0,56,6,1,0,0,0,57,58,5,101,0,0,58,59,5,108,0,0,59,60,5,115,
        0,0,60,61,5,101,0,0,61,8,1,0,0,0,62,63,5,102,0,0,63,64,5,111,0,0,
        64,65,5,114,0,0,65,10,1,0,0,0,66,67,5,105,0,0,67,68,5,110,0,0,68,
        12,1,0,0,0,69,70,5,114,0,0,70,71,5,97,0,0,71,72,5,110,0,0,72,73,
        5,103,0,0,73,74,5,101,0,0,74,75,5,40,0,0,75,14,1,0,0,0,76,77,5,44,
        0,0,77,16,1,0,0,0,78,79,5,41,0,0,79,18,1,0,0,0,80,81,5,119,0,0,81,
        82,5,104,0,0,82,83,5,105,0,0,83,84,5,108,0,0,84,85,5,101,0,0,85,
        20,1,0,0,0,86,87,5,40,0,0,87,22,1,0,0,0,88,89,7,0,0,0,89,24,1,0,
        0,0,90,100,5,61,0,0,91,92,5,43,0,0,92,100,5,61,0,0,93,94,5,45,0,
        0,94,100,5,61,0,0,95,96,5,42,0,0,96,100,5,61,0,0,97,98,5,47,0,0,
        98,100,5,61,0,0,99,90,1,0,0,0,99,91,1,0,0,0,99,93,1,0,0,0,99,95,
        1,0,0,0,99,97,1,0,0,0,100,26,1,0,0,0,101,120,5,60,0,0,102,103,5,
        60,0,0,103,120,5,61,0,0,104,120,5,62,0,0,105,106,5,62,0,0,106,120,
        5,61,0,0,107,108,5,61,0,0,108,120,5,61,0,0,109,110,5,33,0,0,110,
        120,5,61,0,0,111,112,5,97,0,0,112,113,5,110,0,0,113,120,5,100,0,
        0,114,115,5,111,0,0,115,120,5,114,0,0,116,117,5,110,0,0,117,118,
        5,111,0,0,118,120,5,116,0,0,119,101,1,0,0,0,119,102,1,0,0,0,119,
        104,1,0,0,0,119,105,1,0,0,0,119,107,1,0,0,0,119,109,1,0,0,0,119,
        111,1,0,0,0,119,114,1,0,0,0,119,116,1,0,0,0,120,28,1,0,0,0,121,122,
        5,84,0,0,122,123,5,114,0,0,123,124,5,117,0,0,124,131,5,101,0,0,125,
        126,5,70,0,0,126,127,5,97,0,0,127,128,5,108,0,0,128,129,5,115,0,
        0,129,131,5,101,0,0,130,121,1,0,0,0,130,125,1,0,0,0,131,30,1,0,0,
        0,132,136,7,1,0,0,133,135,7,2,0,0,134,133,1,0,0,0,135,138,1,0,0,
        0,136,134,1,0,0,0,136,137,1,0,0,0,137,32,1,0,0,0,138,136,1,0,0,0,
        139,141,5,45,0,0,140,139,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,
        142,144,7,3,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,
        145,146,1,0,0,0,146,153,1,0,0,0,147,149,5,46,0,0,148,150,7,3,0,0,
        149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,
        152,154,1,0,0,0,153,147,1,0,0,0,153,154,1,0,0,0,154,34,1,0,0,0,155,
        159,5,34,0,0,156,158,8,4,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,
        157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,
        172,5,34,0,0,163,167,5,39,0,0,164,166,8,5,0,0,165,164,1,0,0,0,166,
        169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,
        167,1,0,0,0,170,172,5,39,0,0,171,155,1,0,0,0,171,163,1,0,0,0,172,
        36,1,0,0,0,173,176,5,91,0,0,174,177,3,33,16,0,175,177,3,35,17,0,
        176,174,1,0,0,0,176,175,1,0,0,0,177,187,1,0,0,0,178,179,5,44,0,0,
        179,180,5,32,0,0,180,183,1,0,0,0,181,184,3,33,16,0,182,184,3,35,
        17,0,183,181,1,0,0,0,183,182,1,0,0,0,184,186,1,0,0,0,185,178,1,0,
        0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,
        0,0,189,187,1,0,0,0,190,191,5,93,0,0,191,38,1,0,0,0,192,196,5,35,
        0,0,193,195,8,6,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,
        0,0,196,197,1,0,0,0,197,219,1,0,0,0,198,196,1,0,0,0,199,200,5,39,
        0,0,200,201,5,39,0,0,201,202,5,39,0,0,202,206,1,0,0,0,203,205,3,
        31,15,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,212,1,0,0,0,208,206,1,0,0,0,209,211,9,0,0,0,210,209,
        1,0,0,0,211,214,1,0,0,0,212,213,1,0,0,0,212,210,1,0,0,0,213,215,
        1,0,0,0,214,212,1,0,0,0,215,216,5,39,0,0,216,217,5,39,0,0,217,219,
        5,39,0,0,218,192,1,0,0,0,218,199,1,0,0,0,219,40,1,0,0,0,220,221,
        5,9,0,0,221,42,1,0,0,0,222,224,5,13,0,0,223,222,1,0,0,0,223,224,
        1,0,0,0,224,225,1,0,0,0,225,226,5,10,0,0,226,227,1,0,0,0,227,228,
        6,21,0,0,228,44,1,0,0,0,229,231,7,7,0,0,230,229,1,0,0,0,231,232,
        1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,
        6,22,0,0,235,46,1,0,0,0,21,0,99,119,130,136,140,145,151,153,159,
        167,171,176,183,187,196,206,212,218,223,232,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    ARITH_OP = 12
    ASSGN_OP = 13
    COND_OP = 14
    BOOL = 15
    VAR = 16
    NUMBER = 17
    STRING = 18
    ARRAY = 19
    COMMENT = 20
    INDENT = 21
    NEWLINE = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "':'", "'elif'", "'else'", "'for'", "'in'", "'range('", 
            "','", "')'", "'while'", "'('", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "ARITH_OP", "ASSGN_OP", "COND_OP", "BOOL", "VAR", "NUMBER", 
            "STRING", "ARRAY", "COMMENT", "INDENT", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "ARITH_OP", "ASSGN_OP", 
                  "COND_OP", "BOOL", "VAR", "NUMBER", "STRING", "ARRAY", 
                  "COMMENT", "INDENT", "NEWLINE", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


