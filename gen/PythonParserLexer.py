# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,3,12,76,8,12,1,13,1,13,5,13,80,8,13,10,13,12,13,
        83,9,13,1,14,1,14,4,14,87,8,14,11,14,12,14,88,1,14,1,14,1,15,4,15,
        94,8,15,11,15,12,15,95,1,15,1,15,4,15,100,8,15,11,15,12,15,101,5,
        15,104,8,15,10,15,12,15,107,9,15,1,16,4,16,110,8,16,11,16,12,16,
        111,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,4,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,
        32,32,124,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,40,1,0,0,0,5,46,1,
        0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,52,1,0,0,0,13,54,1,0,0,0,15,56,
        1,0,0,0,17,58,1,0,0,0,19,60,1,0,0,0,21,62,1,0,0,0,23,64,1,0,0,0,
        25,75,1,0,0,0,27,77,1,0,0,0,29,84,1,0,0,0,31,93,1,0,0,0,33,109,1,
        0,0,0,35,36,5,84,0,0,36,37,5,114,0,0,37,38,5,117,0,0,38,39,5,101,
        0,0,39,2,1,0,0,0,40,41,5,70,0,0,41,42,5,97,0,0,42,43,5,108,0,0,43,
        44,5,115,0,0,44,45,5,101,0,0,45,4,1,0,0,0,46,47,5,42,0,0,47,6,1,
        0,0,0,48,49,5,47,0,0,49,8,1,0,0,0,50,51,5,37,0,0,51,10,1,0,0,0,52,
        53,5,43,0,0,53,12,1,0,0,0,54,55,5,45,0,0,55,14,1,0,0,0,56,57,5,40,
        0,0,57,16,1,0,0,0,58,59,5,41,0,0,59,18,1,0,0,0,60,61,5,91,0,0,61,
        20,1,0,0,0,62,63,5,44,0,0,63,22,1,0,0,0,64,65,5,93,0,0,65,24,1,0,
        0,0,66,76,5,61,0,0,67,68,5,43,0,0,68,76,5,61,0,0,69,70,5,45,0,0,
        70,76,5,61,0,0,71,72,5,42,0,0,72,76,5,61,0,0,73,74,5,47,0,0,74,76,
        5,61,0,0,75,66,1,0,0,0,75,67,1,0,0,0,75,69,1,0,0,0,75,71,1,0,0,0,
        75,73,1,0,0,0,76,26,1,0,0,0,77,81,7,0,0,0,78,80,7,1,0,0,79,78,1,
        0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,28,1,0,0,0,83,
        81,1,0,0,0,84,86,5,39,0,0,85,87,7,1,0,0,86,85,1,0,0,0,87,88,1,0,
        0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,39,0,0,91,
        30,1,0,0,0,92,94,7,2,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,
        0,95,96,1,0,0,0,96,105,1,0,0,0,97,99,5,46,0,0,98,100,7,2,0,0,99,
        98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,
        1,0,0,0,103,97,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,
        0,0,0,106,32,1,0,0,0,107,105,1,0,0,0,108,110,7,3,0,0,109,108,1,0,
        0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,
        0,0,113,114,6,16,0,0,114,34,1,0,0,0,8,0,75,81,88,95,101,105,111,
        1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    ASSIGN_OP = 13
    ID = 14
    STRING = 15
    NUMBER = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'True'", "'False'", "'*'", "'/'", "'%'", "'+'", "'-'", "'('", 
            "')'", "'['", "','", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGN_OP", "ID", "STRING", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "ASSIGN_OP", 
                  "ID", "STRING", "NUMBER", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


