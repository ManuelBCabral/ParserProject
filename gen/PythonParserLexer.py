# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,254,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        3,16,126,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,138,8,17,1,18,4,18,141,8,18,11,18,12,18,142,1,19,1,19,1,20,
        1,20,5,20,149,8,20,10,20,12,20,152,9,20,1,21,1,21,1,22,3,22,157,
        8,22,1,22,4,22,160,8,22,11,22,12,22,161,1,22,1,22,4,22,166,8,22,
        11,22,12,22,167,3,22,170,8,22,1,23,1,23,1,23,1,23,5,23,176,8,23,
        10,23,12,23,179,9,23,1,23,1,23,1,23,1,23,1,23,5,23,186,8,23,10,23,
        12,23,189,9,23,1,23,3,23,192,8,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,3,24,203,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,219,8,26,10,26,12,26,222,
        9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,231,8,27,10,27,12,27,
        234,9,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,4,28,243,8,28,11,28,
        12,28,244,1,28,1,28,1,29,1,29,4,29,251,8,29,11,29,12,29,252,1,232,
        0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,10,4,0,37,37,42,43,45,
        45,47,47,2,0,9,9,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,2,0,65,90,97,122,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,
        92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,280,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,65,1,0,0,
        0,5,68,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,76,1,0,0,0,13,79,1,0,
        0,0,15,81,1,0,0,0,17,86,1,0,0,0,19,91,1,0,0,0,21,97,1,0,0,0,23,101,
        1,0,0,0,25,104,1,0,0,0,27,106,1,0,0,0,29,108,1,0,0,0,31,110,1,0,
        0,0,33,125,1,0,0,0,35,137,1,0,0,0,37,140,1,0,0,0,39,144,1,0,0,0,
        41,146,1,0,0,0,43,153,1,0,0,0,45,156,1,0,0,0,47,191,1,0,0,0,49,202,
        1,0,0,0,51,204,1,0,0,0,53,216,1,0,0,0,55,225,1,0,0,0,57,242,1,0,
        0,0,59,248,1,0,0,0,61,62,5,97,0,0,62,63,5,110,0,0,63,64,5,100,0,
        0,64,2,1,0,0,0,65,66,5,111,0,0,66,67,5,114,0,0,67,4,1,0,0,0,68,69,
        5,110,0,0,69,70,5,111,0,0,70,71,5,116,0,0,71,6,1,0,0,0,72,73,5,40,
        0,0,73,8,1,0,0,0,74,75,5,41,0,0,75,10,1,0,0,0,76,77,5,105,0,0,77,
        78,5,102,0,0,78,12,1,0,0,0,79,80,5,58,0,0,80,14,1,0,0,0,81,82,5,
        101,0,0,82,83,5,108,0,0,83,84,5,105,0,0,84,85,5,102,0,0,85,16,1,
        0,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,5,115,0,0,89,90,5,101,
        0,0,90,18,1,0,0,0,91,92,5,119,0,0,92,93,5,104,0,0,93,94,5,105,0,
        0,94,95,5,108,0,0,95,96,5,101,0,0,96,20,1,0,0,0,97,98,5,102,0,0,
        98,99,5,111,0,0,99,100,5,114,0,0,100,22,1,0,0,0,101,102,5,105,0,
        0,102,103,5,110,0,0,103,24,1,0,0,0,104,105,5,91,0,0,105,26,1,0,0,
        0,106,107,5,44,0,0,107,28,1,0,0,0,108,109,5,93,0,0,109,30,1,0,0,
        0,110,111,7,0,0,0,111,32,1,0,0,0,112,126,5,61,0,0,113,114,5,43,0,
        0,114,126,5,61,0,0,115,116,5,45,0,0,116,126,5,61,0,0,117,118,5,42,
        0,0,118,126,5,61,0,0,119,120,5,47,0,0,120,126,5,61,0,0,121,122,5,
        37,0,0,122,126,5,61,0,0,123,124,5,38,0,0,124,126,5,61,0,0,125,112,
        1,0,0,0,125,113,1,0,0,0,125,115,1,0,0,0,125,117,1,0,0,0,125,119,
        1,0,0,0,125,121,1,0,0,0,125,123,1,0,0,0,126,34,1,0,0,0,127,128,5,
        61,0,0,128,138,5,61,0,0,129,130,5,33,0,0,130,138,5,61,0,0,131,138,
        5,60,0,0,132,133,5,60,0,0,133,138,5,61,0,0,134,138,5,62,0,0,135,
        136,5,62,0,0,136,138,5,61,0,0,137,127,1,0,0,0,137,129,1,0,0,0,137,
        131,1,0,0,0,137,132,1,0,0,0,137,134,1,0,0,0,137,135,1,0,0,0,138,
        36,1,0,0,0,139,141,7,1,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,
        1,0,0,0,142,143,1,0,0,0,143,38,1,0,0,0,144,145,5,10,0,0,145,40,1,
        0,0,0,146,150,7,2,0,0,147,149,7,3,0,0,148,147,1,0,0,0,149,152,1,
        0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,42,1,0,0,0,152,150,1,0,
        0,0,153,154,7,4,0,0,154,44,1,0,0,0,155,157,5,45,0,0,156,155,1,0,
        0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,160,7,5,0,0,159,158,1,0,
        0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,169,1,0,
        0,0,163,165,5,46,0,0,164,166,7,5,0,0,165,164,1,0,0,0,166,167,1,0,
        0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,163,1,0,
        0,0,169,170,1,0,0,0,170,46,1,0,0,0,171,177,5,34,0,0,172,173,5,92,
        0,0,173,176,9,0,0,0,174,176,8,6,0,0,175,172,1,0,0,0,175,174,1,0,
        0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,
        0,0,179,177,1,0,0,0,180,192,5,34,0,0,181,187,5,39,0,0,182,183,5,
        92,0,0,183,186,9,0,0,0,184,186,8,7,0,0,185,182,1,0,0,0,185,184,1,
        0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,
        0,0,0,189,187,1,0,0,0,190,192,5,39,0,0,191,171,1,0,0,0,191,181,1,
        0,0,0,192,48,1,0,0,0,193,194,5,84,0,0,194,195,5,114,0,0,195,196,
        5,117,0,0,196,203,5,101,0,0,197,198,5,70,0,0,198,199,5,97,0,0,199,
        200,5,108,0,0,200,201,5,115,0,0,201,203,5,101,0,0,202,193,1,0,0,
        0,202,197,1,0,0,0,203,50,1,0,0,0,204,205,5,114,0,0,205,206,5,97,
        0,0,206,207,5,110,0,0,207,208,5,103,0,0,208,209,5,101,0,0,209,210,
        5,40,0,0,210,211,1,0,0,0,211,212,3,45,22,0,212,213,5,44,0,0,213,
        214,3,45,22,0,214,215,5,41,0,0,215,52,1,0,0,0,216,220,5,35,0,0,217,
        219,8,8,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,
        221,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,224,6,26,0,0,224,
        54,1,0,0,0,225,226,5,39,0,0,226,227,5,39,0,0,227,228,5,39,0,0,228,
        232,1,0,0,0,229,231,9,0,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,
        233,1,0,0,0,232,230,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,
        236,5,39,0,0,236,237,5,39,0,0,237,238,5,39,0,0,238,239,1,0,0,0,239,
        240,6,27,0,0,240,56,1,0,0,0,241,243,7,9,0,0,242,241,1,0,0,0,243,
        244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,
        247,6,28,0,0,247,58,1,0,0,0,248,250,5,10,0,0,249,251,7,1,0,0,250,
        249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
        60,1,0,0,0,19,0,125,137,142,150,156,161,167,169,175,177,185,187,
        191,202,220,232,244,252,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    ARITH_OP = 16
    ASSIGN_OP = 17
    COND_OP = 18
    INDENT = 19
    DEDENT = 20
    VAR = 21
    CHAR = 22
    NUM = 23
    STRING = 24
    BOOL = 25
    RANGE = 26
    COMMENT = 27
    MULTICOMMENT = 28
    WS = 29
    TAB = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'('", "')'", "'if'", "':'", "'elif'", 
            "'else'", "'while'", "'for'", "'in'", "'['", "','", "']'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "ARITH_OP", "ASSIGN_OP", "COND_OP", "INDENT", "DEDENT", "VAR", 
            "CHAR", "NUM", "STRING", "BOOL", "RANGE", "COMMENT", "MULTICOMMENT", 
            "WS", "TAB" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "ARITH_OP", "ASSIGN_OP", "COND_OP", "INDENT", 
                  "DEDENT", "VAR", "CHAR", "NUM", "STRING", "BOOL", "RANGE", 
                  "COMMENT", "MULTICOMMENT", "WS", "TAB" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


