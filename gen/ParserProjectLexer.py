# Generated from ParserProject.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,77,8,0,1,1,1,1,1,1,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,29,1,29,5,29,157,8,29,10,29,12,29,160,9,29,1,30,1,30,5,
        30,164,8,30,10,30,12,30,167,9,30,1,30,1,30,1,30,5,30,172,8,30,10,
        30,12,30,175,9,30,1,30,3,30,178,8,30,1,31,4,31,181,8,31,11,31,12,
        31,182,1,31,1,31,4,31,187,8,31,11,31,12,31,188,3,31,191,8,31,1,32,
        4,32,194,8,32,11,32,12,32,195,1,32,1,32,2,165,173,0,33,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,4,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,
        32,210,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,76,1,0,0,0,3,78,1,0,0,
        0,5,81,1,0,0,0,7,86,1,0,0,0,9,91,1,0,0,0,11,96,1,0,0,0,13,102,1,
        0,0,0,15,104,1,0,0,0,17,107,1,0,0,0,19,110,1,0,0,0,21,112,1,0,0,
        0,23,114,1,0,0,0,25,116,1,0,0,0,27,118,1,0,0,0,29,120,1,0,0,0,31,
        122,1,0,0,0,33,125,1,0,0,0,35,127,1,0,0,0,37,130,1,0,0,0,39,133,
        1,0,0,0,41,136,1,0,0,0,43,138,1,0,0,0,45,140,1,0,0,0,47,142,1,0,
        0,0,49,144,1,0,0,0,51,146,1,0,0,0,53,148,1,0,0,0,55,150,1,0,0,0,
        57,152,1,0,0,0,59,154,1,0,0,0,61,177,1,0,0,0,63,180,1,0,0,0,65,193,
        1,0,0,0,67,77,5,61,0,0,68,69,5,43,0,0,69,77,5,61,0,0,70,71,5,45,
        0,0,71,77,5,61,0,0,72,73,5,42,0,0,73,77,5,61,0,0,74,75,5,47,0,0,
        75,77,5,61,0,0,76,67,1,0,0,0,76,68,1,0,0,0,76,70,1,0,0,0,76,72,1,
        0,0,0,76,74,1,0,0,0,77,2,1,0,0,0,78,79,5,105,0,0,79,80,5,102,0,0,
        80,4,1,0,0,0,81,82,5,101,0,0,82,83,5,108,0,0,83,84,5,105,0,0,84,
        85,5,102,0,0,85,6,1,0,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,
        5,115,0,0,89,90,5,101,0,0,90,8,1,0,0,0,91,92,5,84,0,0,92,93,5,114,
        0,0,93,94,5,117,0,0,94,95,5,101,0,0,95,10,1,0,0,0,96,97,5,70,0,0,
        97,98,5,97,0,0,98,99,5,108,0,0,99,100,5,115,0,0,100,101,5,101,0,
        0,101,12,1,0,0,0,102,103,5,33,0,0,103,14,1,0,0,0,104,105,5,38,0,
        0,105,106,5,38,0,0,106,16,1,0,0,0,107,108,5,124,0,0,108,109,5,124,
        0,0,109,18,1,0,0,0,110,111,5,43,0,0,111,20,1,0,0,0,112,113,5,45,
        0,0,113,22,1,0,0,0,114,115,5,42,0,0,115,24,1,0,0,0,116,117,5,47,
        0,0,117,26,1,0,0,0,118,119,5,37,0,0,119,28,1,0,0,0,120,121,5,60,
        0,0,121,30,1,0,0,0,122,123,5,60,0,0,123,124,5,61,0,0,124,32,1,0,
        0,0,125,126,5,62,0,0,126,34,1,0,0,0,127,128,5,62,0,0,128,129,5,61,
        0,0,129,36,1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,132,38,1,0,
        0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,40,1,0,0,0,136,137,5,40,
        0,0,137,42,1,0,0,0,138,139,5,41,0,0,139,44,1,0,0,0,140,141,5,123,
        0,0,141,46,1,0,0,0,142,143,5,125,0,0,143,48,1,0,0,0,144,145,5,91,
        0,0,145,50,1,0,0,0,146,147,5,93,0,0,147,52,1,0,0,0,148,149,5,58,
        0,0,149,54,1,0,0,0,150,151,5,44,0,0,151,56,1,0,0,0,152,153,5,59,
        0,0,153,58,1,0,0,0,154,158,7,0,0,0,155,157,7,1,0,0,156,155,1,0,0,
        0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,60,1,0,0,0,
        160,158,1,0,0,0,161,165,5,39,0,0,162,164,9,0,0,0,163,162,1,0,0,0,
        164,167,1,0,0,0,165,166,1,0,0,0,165,163,1,0,0,0,166,168,1,0,0,0,
        167,165,1,0,0,0,168,178,5,39,0,0,169,173,5,34,0,0,170,172,9,0,0,
        0,171,170,1,0,0,0,172,175,1,0,0,0,173,174,1,0,0,0,173,171,1,0,0,
        0,174,176,1,0,0,0,175,173,1,0,0,0,176,178,5,34,0,0,177,161,1,0,0,
        0,177,169,1,0,0,0,178,62,1,0,0,0,179,181,7,2,0,0,180,179,1,0,0,0,
        181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,190,1,0,0,0,
        184,186,5,46,0,0,185,187,7,2,0,0,186,185,1,0,0,0,187,188,1,0,0,0,
        188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,184,1,0,0,0,
        190,191,1,0,0,0,191,64,1,0,0,0,192,194,7,3,0,0,193,192,1,0,0,0,194,
        195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,
        198,6,32,0,0,198,66,1,0,0,0,10,0,76,158,165,173,177,182,188,190,
        195,1,6,0,0
    ]

class ParserProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGN_OP = 1
    IF = 2
    ELIF = 3
    ELSE = 4
    TRUE = 5
    FALSE = 6
    NOT = 7
    AND = 8
    OR = 9
    ADD = 10
    SUB = 11
    MUL = 12
    DIV = 13
    MOD = 14
    LT = 15
    LE = 16
    GT = 17
    GE = 18
    EQ = 19
    NE = 20
    LPAREN = 21
    RPAREN = 22
    LBRACE = 23
    RBRACE = 24
    LBRACKET = 25
    RBRACKET = 26
    COLON = 27
    COMMA = 28
    SEMICOLON = 29
    ID = 30
    STRING = 31
    NUMBER = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'elif'", "'else'", "'True'", "'False'", "'!'", "'&&'", 
            "'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", 
            "'>='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "':'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGN_OP", "IF", "ELIF", "ELSE", "TRUE", "FALSE", "NOT", "AND", 
            "OR", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "LE", "GT", "GE", 
            "EQ", "NE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
            "RBRACKET", "COLON", "COMMA", "SEMICOLON", "ID", "STRING", "NUMBER", 
            "WS" ]

    ruleNames = [ "ASSIGN_OP", "IF", "ELIF", "ELSE", "TRUE", "FALSE", "NOT", 
                  "AND", "OR", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", 
                  "LE", "GT", "GE", "EQ", "NE", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACKET", "RBRACKET", "COLON", "COMMA", "SEMICOLON", 
                  "ID", "STRING", "NUMBER", "WS" ]

    grammarFileName = "ParserProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


