# Generated from PythonParser.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from pythonParser import pythonParser


def serializedATN():
    return [
        4,0,39,311,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,3,23,165,8,23,1,23,1,23,1,23,5,23,170,8,23,10,23,12,23,173,
        9,23,1,24,3,24,176,8,24,1,24,4,24,179,8,24,11,24,12,24,180,1,24,
        3,24,184,8,24,1,25,1,25,3,25,188,8,25,1,26,1,26,5,26,192,8,26,10,
        26,12,26,195,9,26,1,26,1,26,3,26,199,8,26,1,27,1,27,3,27,203,8,27,
        1,27,3,27,206,8,27,1,27,1,27,3,27,210,8,27,1,27,1,27,3,27,214,8,
        27,1,27,3,27,217,8,27,1,27,1,27,3,27,221,8,27,1,27,1,27,3,27,225,
        8,27,5,27,227,8,27,10,27,12,27,230,9,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,247,8,29,
        1,29,1,29,1,30,1,30,3,30,253,8,30,1,30,1,30,1,30,3,30,258,8,30,1,
        31,4,31,261,8,31,11,31,12,31,262,1,32,1,32,1,33,1,33,1,34,1,34,5,
        34,271,8,34,10,34,12,34,274,9,34,1,34,1,34,1,35,1,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,293,8,
        36,1,37,3,37,296,8,37,1,37,1,37,5,37,300,8,37,10,37,12,37,303,9,
        37,1,38,4,38,306,8,38,11,38,12,38,307,1,38,1,38,0,0,39,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,1,0,6,2,0,10,10,13,13,1,0,48,57,1,0,97,122,1,0,65,90,
        5,0,37,37,42,43,45,45,47,47,94,94,2,0,9,9,32,32,342,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,84,
        1,0,0,0,7,86,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,94,1,0,0,0,15,
        97,1,0,0,0,17,101,1,0,0,0,19,104,1,0,0,0,21,108,1,0,0,0,23,111,1,
        0,0,0,25,113,1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,122,1,0,0,
        0,33,127,1,0,0,0,35,133,1,0,0,0,37,137,1,0,0,0,39,140,1,0,0,0,41,
        147,1,0,0,0,43,154,1,0,0,0,45,156,1,0,0,0,47,164,1,0,0,0,49,183,
        1,0,0,0,51,187,1,0,0,0,53,198,1,0,0,0,55,202,1,0,0,0,57,231,1,0,
        0,0,59,239,1,0,0,0,61,252,1,0,0,0,63,260,1,0,0,0,65,264,1,0,0,0,
        67,266,1,0,0,0,69,268,1,0,0,0,71,277,1,0,0,0,73,292,1,0,0,0,75,295,
        1,0,0,0,77,305,1,0,0,0,79,80,5,33,0,0,80,2,1,0,0,0,81,82,5,60,0,
        0,82,83,5,61,0,0,83,4,1,0,0,0,84,85,5,60,0,0,85,6,1,0,0,0,86,87,
        5,61,0,0,87,88,5,61,0,0,88,8,1,0,0,0,89,90,5,62,0,0,90,10,1,0,0,
        0,91,92,5,62,0,0,92,93,5,61,0,0,93,12,1,0,0,0,94,95,5,33,0,0,95,
        96,5,61,0,0,96,14,1,0,0,0,97,98,5,97,0,0,98,99,5,110,0,0,99,100,
        5,100,0,0,100,16,1,0,0,0,101,102,5,111,0,0,102,103,5,114,0,0,103,
        18,1,0,0,0,104,105,5,110,0,0,105,106,5,111,0,0,106,107,5,116,0,0,
        107,20,1,0,0,0,108,109,5,105,0,0,109,110,5,102,0,0,110,22,1,0,0,
        0,111,112,5,40,0,0,112,24,1,0,0,0,113,114,5,41,0,0,114,26,1,0,0,
        0,115,116,5,58,0,0,116,28,1,0,0,0,117,118,5,101,0,0,118,119,5,108,
        0,0,119,120,5,105,0,0,120,121,5,102,0,0,121,30,1,0,0,0,122,123,5,
        101,0,0,123,124,5,108,0,0,124,125,5,115,0,0,125,126,5,101,0,0,126,
        32,1,0,0,0,127,128,5,119,0,0,128,129,5,104,0,0,129,130,5,105,0,0,
        130,131,5,108,0,0,131,132,5,101,0,0,132,34,1,0,0,0,133,134,5,102,
        0,0,134,135,5,111,0,0,135,136,5,114,0,0,136,36,1,0,0,0,137,138,5,
        105,0,0,138,139,5,110,0,0,139,38,1,0,0,0,140,141,5,112,0,0,141,142,
        5,114,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,145,5,116,0,0,
        145,146,5,40,0,0,146,40,1,0,0,0,147,148,5,114,0,0,148,149,5,97,0,
        0,149,150,5,110,0,0,150,151,5,103,0,0,151,152,5,101,0,0,152,153,
        5,40,0,0,153,42,1,0,0,0,154,155,5,44,0,0,155,44,1,0,0,0,156,157,
        5,98,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,97,0,0,160,
        161,5,107,0,0,161,46,1,0,0,0,162,165,3,51,25,0,163,165,5,95,0,0,
        164,162,1,0,0,0,164,163,1,0,0,0,165,171,1,0,0,0,166,170,3,51,25,
        0,167,170,5,95,0,0,168,170,3,63,31,0,169,166,1,0,0,0,169,167,1,0,
        0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
        0,0,172,48,1,0,0,0,173,171,1,0,0,0,174,176,5,45,0,0,175,174,1,0,
        0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,179,3,63,31,0,178,177,1,
        0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,184,1,
        0,0,0,182,184,3,59,29,0,183,175,1,0,0,0,183,182,1,0,0,0,184,50,1,
        0,0,0,185,188,3,65,32,0,186,188,3,67,33,0,187,185,1,0,0,0,187,186,
        1,0,0,0,188,52,1,0,0,0,189,193,5,34,0,0,190,192,8,0,0,0,191,190,
        1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,
        1,0,0,0,195,193,1,0,0,0,196,199,5,34,0,0,197,199,3,57,28,0,198,189,
        1,0,0,0,198,197,1,0,0,0,199,54,1,0,0,0,200,203,3,49,24,0,201,203,
        3,47,23,0,202,200,1,0,0,0,202,201,1,0,0,0,203,205,1,0,0,0,204,206,
        5,32,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,209,
        3,71,35,0,208,210,5,32,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,213,
        1,0,0,0,211,214,3,49,24,0,212,214,3,47,23,0,213,211,1,0,0,0,213,
        212,1,0,0,0,214,228,1,0,0,0,215,217,5,32,0,0,216,215,1,0,0,0,216,
        217,1,0,0,0,217,218,1,0,0,0,218,220,3,71,35,0,219,221,5,32,0,0,220,
        219,1,0,0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,225,3,49,24,0,223,
        225,3,47,23,0,224,222,1,0,0,0,224,223,1,0,0,0,225,227,1,0,0,0,226,
        216,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
        56,1,0,0,0,230,228,1,0,0,0,231,232,5,115,0,0,232,233,5,116,0,0,233,
        234,5,114,0,0,234,235,5,40,0,0,235,236,1,0,0,0,236,237,3,47,23,0,
        237,238,5,41,0,0,238,58,1,0,0,0,239,240,5,105,0,0,240,241,5,110,
        0,0,241,242,5,116,0,0,242,243,5,40,0,0,243,246,1,0,0,0,244,247,3,
        47,23,0,245,247,3,55,27,0,246,244,1,0,0,0,246,245,1,0,0,0,247,248,
        1,0,0,0,248,249,5,41,0,0,249,60,1,0,0,0,250,253,3,53,26,0,251,253,
        3,47,23,0,252,250,1,0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,257,
        5,43,0,0,255,258,3,53,26,0,256,258,3,47,23,0,257,255,1,0,0,0,257,
        256,1,0,0,0,258,62,1,0,0,0,259,261,7,1,0,0,260,259,1,0,0,0,261,262,
        1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,64,1,0,0,0,264,265,7,
        2,0,0,265,66,1,0,0,0,266,267,7,3,0,0,267,68,1,0,0,0,268,272,5,35,
        0,0,269,271,8,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,
        0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,6,34,
        0,0,276,70,1,0,0,0,277,278,7,4,0,0,278,72,1,0,0,0,279,293,5,61,0,
        0,280,281,5,43,0,0,281,293,5,61,0,0,282,283,5,45,0,0,283,293,5,61,
        0,0,284,285,5,42,0,0,285,293,5,61,0,0,286,287,5,47,0,0,287,293,5,
        61,0,0,288,289,5,94,0,0,289,293,5,61,0,0,290,291,5,37,0,0,291,293,
        5,61,0,0,292,279,1,0,0,0,292,280,1,0,0,0,292,282,1,0,0,0,292,284,
        1,0,0,0,292,286,1,0,0,0,292,288,1,0,0,0,292,290,1,0,0,0,293,74,1,
        0,0,0,294,296,5,13,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,
        0,0,0,297,301,5,10,0,0,298,300,5,32,0,0,299,298,1,0,0,0,300,303,
        1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,76,1,0,0,0,303,301,1,
        0,0,0,304,306,7,5,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,
        0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,6,38,0,0,310,78,1,
        0,0,0,27,0,164,169,171,175,180,183,187,193,198,202,205,209,213,216,
        220,224,228,246,252,257,262,272,292,295,301,307,1,6,0,0
    ]

class pythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    VAR = 24
    NUMBER = 25
    LETTER = 26
    STRING = 27
    ARITHMETIC = 28
    STR = 29
    INT = 30
    STRADD = 31
    DIGIT = 32
    LOWER = 33
    UPPER = 34
    COMMENT = 35
    OP = 36
    ASSIGN = 37
    NL = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'<='", "'<'", "'=='", "'>'", "'>='", "'!='", "'and'", 
            "'or'", "'not'", "'if'", "'('", "')'", "':'", "'elif'", "'else'", 
            "'while'", "'for'", "'in'", "'print('", "'range('", "','", "'break'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUMBER", "LETTER", "STRING", "ARITHMETIC", "STR", "INT", 
            "STRADD", "DIGIT", "LOWER", "UPPER", "COMMENT", "OP", "ASSIGN", 
            "NL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "VAR", "NUMBER", "LETTER", 
                  "STRING", "ARITHMETIC", "STR", "INT", "STRADD", "DIGIT", 
                  "LOWER", "UPPER", "COMMENT", "OP", "ASSIGN", "NL", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: pythonLexer = lexer

        def pull_token(self):
            return super(pythonLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NL, pythonParser.INDENT, pythonParser.DEDENT, 1) 
        return self.denter.next_token()



